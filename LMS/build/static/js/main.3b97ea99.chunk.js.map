{"version":3,"sources":["pages/HomePage/FooterComponent/components/HelpAndSupport.jsx","pages/HomePage/FooterComponent/components/QuickLink.jsx","pages/HomePage/FooterComponent/Footer.jsx","pages/HomePage/LoginFormComponent/components/LoginForm.jsx","pages/HomePage/Home.jsx","pages/Router.js","serviceWorker.js","index.js"],"names":["HelpAndSupport","ContentWithTItle","_ref2","title","children","react_default","a","createElement","Fragment","className","_ref","href","React","Component","QuickLink","Footer","components_HelpAndSupport","components_QuickLink","LoginForm","type","placeholder","Home","components_LoginForm","FooterComponent_Footer","Router","BrowserRouter","Switch","Route","exact","path","component","Boolean","window","location","hostname","match","ReactDOM","render","pages_Router","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"2SAsCeA,0LAjCP,IAUMC,EAAmB,SAAAC,GAAA,IACrBC,EADqBD,EACrBC,MACAC,EAFqBF,EAErBE,SAFqB,OAIrBC,EAAAC,EAAAC,cAAA,WACIF,EAAAC,EAAAC,cAAA,YAAOJ,EAAP,KACAE,EAAAC,EAAAC,cAAAF,EAAAC,EAAAE,SAAA,KAAEH,EAAAC,EAAAC,cAAA,OAAKE,UAAU,WAAf,IAA2BL,MAIrC,OACIC,EAAAC,EAAAC,cAAA,OAAKE,UAAU,oBACfJ,EAAAC,EAAAC,cAtBY,SAAAG,GAAA,IACZP,EADYO,EACZP,MACAC,EAFYM,EAEZN,SAFY,OAIZC,EAAAC,EAAAC,cAAA,WACAF,EAAAC,EAAAC,cAAA,UAAKJ,GACLE,EAAAC,EAAAC,cAAAF,EAAAC,EAAAE,SAAA,KAAGJ,KAgBH,CAASD,MAAM,oBACbE,EAAAC,EAAAC,cAAA,6FACAF,EAAAC,EAAAC,cAACN,EAAD,CAAkBE,MAAM,iBAAxB,eACAE,EAAAC,EAAAC,cAACN,EAAD,CAAkBE,MAAM,SAAQE,EAAAC,EAAAC,cAAA,KAAGI,KAAK,gCAAR,0BAChCN,EAAAC,EAAAC,cAACN,EAAD,CAAkBE,MAAM,SAAxB,qBA5BeS,IAAMC,YCqBpBC,mLATP,OACIT,EAAAC,EAAAC,cAAA,OAAKE,UAAU,cACfJ,EAAAC,EAAAC,cAZY,SAAAG,GAAA,IACZP,EADYO,EACZP,MACAC,EAFYM,EAEZN,SAFY,OAIZC,EAAAC,EAAAC,cAAA,WACAF,EAAAC,EAAAC,cAAA,UAAKJ,GACLE,EAAAC,EAAAC,cAAAF,EAAAC,EAAAE,SAAA,KAAGJ,KAMH,CAASD,MAAM,cACXE,EAAAC,EAAAC,cAAA,KAAGI,KAAK,IAAR,uBAfQC,IAAMC,WCYfE,0LARP,OACIV,EAAAC,EAAAC,cAAA,OAAKE,UAAU,UACfJ,EAAAC,EAAAC,cAACS,EAAD,MACAX,EAAAC,EAAAC,cAACU,EAAD,cALSL,IAAMC,YCSZK,SAXG,kBAChBb,EAAAC,EAAAC,cAAA,OAAKE,UAAU,uBACbJ,EAAAC,EAAAC,cAAA,QAAME,UAAU,aACdJ,EAAAC,EAAAC,cAAA,SAAOY,KAAK,OAAOC,YAAY,aAC/Bf,EAAAC,EAAAC,cAAA,SAAOY,KAAK,WAAWC,YAAY,aACnCf,EAAAC,EAAAC,cAAA,2BCGSc,EANF,kBACThB,EAAAC,EAAAC,cAAA,WACIF,EAAAC,EAAAC,cAACe,EAAD,MACAjB,EAAAC,EAAAC,cAACgB,EAAD,QCMOC,EAVA,kBACXnB,EAAAC,EAAAC,cAACkB,EAAA,EAAD,KACApB,EAAAC,EAAAC,cAACmB,EAAA,EAAD,KACIrB,EAAAC,EAAAC,cAACoB,EAAA,EAAD,CAAOC,OAAK,EAACC,KAAK,IAAIC,UAAWT,OCKrBU,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCXNC,IAASC,OAAOhC,EAAAC,EAAAC,cAAC+B,EAAD,MAAYC,SAASC,eAAe,SD0H9C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.3b97ea99.chunk.js","sourcesContent":["import React from 'react';\nimport './style.css';\n\nclass HelpAndSupport extends React.Component {    \n    render() {\n        const Section = ({\n            title,\n            children,\n        }) => (\n            <div>\n            <h2>{title}</h2>\n            <>{children}</>\n            </div>\n        )\n\n        const ContentWithTItle = ({\n            title,\n            children,\n        }) => (\n            <div>\n                <span>{title}:</span>\n                <><div className=\"content\"> {children}</div></>\n            </div>\n        )\n\n        return (\n            <div className=\"help-and-support\">\n            <Section title=\"HELP AND SUPPORT\">\n              <p>For users experiencing difficulities using LMS,Please contact technical support.</p>\n              <ContentWithTItle title=\"Administrator\">Dawson Wang</ContentWithTItle>\n              <ContentWithTItle title=\"Email\"><a href=\"mailto:sdc009988@outlook.com\">sdc009988@outlook.com</a></ContentWithTItle>\n              <ContentWithTItle title=\"Phone\">04512353</ContentWithTItle>\n            </Section>\n            </div>\n\n        );\n    }\n}\nexport default HelpAndSupport;","import React from 'react';\nimport './style.css';\n\nclass QuickLink extends React.Component {\n    render() {\n        const Section = ({\n            title,\n            children,\n        }) => (\n            <div>\n            <h2>{title}</h2>\n            <>{children}</>\n            </div>\n        )\n\n        return (\n            <div className=\"quick-link\">\n            <Section title=\"QUICK LINK\">\n                <a href=\"\">JR Academy</a>\n            </Section>\n            </div>\n        );\n    }\n}\nexport default QuickLink;","import React from 'react';\nimport HelpAndSupport from './components/HelpAndSupport';\nimport QuickLink from './components/QuickLink';\nimport 'typeface-roboto';\n\nclass Footer extends React.Component {\n    render() {\n        return (\n            <div className=\"footer\">\n            <HelpAndSupport />\n            <QuickLink />\n            </div>\n        );\n    }\n}\nexport default Footer;","import React from \"react\";\nimport \"../components/styles.css\";\n\nconst LoginForm = () => (\n  <div className=\"signInFormContainer\">\n    <form className=\"loginForm\">\n      <input type=\"text\" placeholder=\"userName\" />\n      <input type=\"password\" placeholder=\"password\" />\n      <button>Login</button>\n    </form>\n    \n  </div>\n);\n\nexport default LoginForm;\n","import React from 'react';\nimport Footer from './FooterComponent/Footer';\nimport LoginForm from './LoginFormComponent/components/LoginForm';\nimport { BrowserRouter as Router, Route } from 'react-router-dom'\n\nconst Home = () => (\n    <div>\n        <LoginForm />\n        <Footer /> \n    </div>\n);\nexport default Home;\n","import React from 'react';\nimport { BrowserRouter, Route, Switch} from 'react-router-dom';\nimport Home from '../pages/HomePage/Home'\n\nconst Router = () => (\n    <BrowserRouter>\n    <Switch>\n        <Route exact path=\"/\" component={Home}/>\n        {/* <Route path=\"/LMS/:UserId\" component={Dashboard}/> */}\n        {/* <Route path=\"/LMS/:UserId/courses\" component={Account} /> */}\n    </Switch>\n    </BrowserRouter>\n);\n\nexport default Router;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport Router from \"./pages/Router\";\n\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<Router />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}